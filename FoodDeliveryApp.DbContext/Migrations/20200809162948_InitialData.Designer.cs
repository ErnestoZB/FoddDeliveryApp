// <auto-generated />
using FoodDeliveryApp.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDeliveryApp.Db.Context.Migrations
{
    [DbContext(typeof(FoodDeliveryContext))]
    [Migration("20200809162948_InitialData")]
    partial class InitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodDeliveryApp.Entities.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("DishId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            Description = "Incluye papas",
                            MenuCategoryId = 1,
                            Name = "Hamburguesa con queso",
                            Price = 50.0
                        },
                        new
                        {
                            DishId = 2,
                            Description = "Incluye papas",
                            MenuCategoryId = 1,
                            Name = "Hamburguesa con doble carne",
                            Price = 70.0
                        },
                        new
                        {
                            DishId = 3,
                            Description = "500ml",
                            MenuCategoryId = 2,
                            Name = "Agua de limón",
                            Price = 20.0
                        },
                        new
                        {
                            DishId = 4,
                            Description = "500ml",
                            MenuCategoryId = 2,
                            Name = "Agua de tamarindo",
                            Price = 20.0
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.FoodCategory", b =>
                {
                    b.Property<int>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodCategoryId");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            FoodCategoryId = 1,
                            Icon = "https://i.postimg.cc/Hcm3TwyX/burger.png",
                            Type = "Burger"
                        },
                        new
                        {
                            FoodCategoryId = 2,
                            Icon = "https://i.postimg.cc/S2GdRn65/dessert.png",
                            Type = "Dessert"
                        },
                        new
                        {
                            FoodCategoryId = 3,
                            Icon = "https://i.postimg.cc/zHXjgqpf/pizza.png",
                            Type = "Pizza"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.MenuCategory", b =>
                {
                    b.Property<int>("MenuCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuCategoryId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            MenuCategoryId = 1,
                            MenuId = 1,
                            Name = "Comidas"
                        },
                        new
                        {
                            MenuCategoryId = 2,
                            MenuId = 1,
                            Name = "Bebidas"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.OrderDish", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("OrderDish");
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxDeliveryTime")
                        .HasColumnType("int");

                    b.Property<int>("MinDeliveryTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShippingPrice")
                        .HasColumnType("float");

                    b.HasKey("RestaurantId");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            Address = "ALDAMA NO. 3315, OBRERA, 31000",
                            FoodCategoryId = 1,
                            Image = "https://i.postimg.cc/cCNLMfNm/option3.png",
                            MaxDeliveryTime = 25,
                            MinDeliveryTime = 15,
                            Name = "Burger State",
                            ShippingPrice = 0.0
                        },
                        new
                        {
                            RestaurantId = 2,
                            Address = "ALDAMA NO. 3315, OBRERA, 31000",
                            FoodCategoryId = 1,
                            Image = "https://i.postimg.cc/NMZjpN65/option1.png",
                            MaxDeliveryTime = 45,
                            MinDeliveryTime = 30,
                            Name = "Millonario State Cafe",
                            ShippingPrice = 0.0
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.RestaurantUser", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RestaurantUser");
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Average")
                        .HasColumnType("float");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            ScoreId = 1,
                            Average = 4.2999999999999998,
                            Count = 100,
                            RestaurantId = 1
                        },
                        new
                        {
                            ScoreId = 2,
                            Average = 4.7999999999999998,
                            Count = 87,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Dish", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.MenuCategory", "MenuCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Menu", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.Restaurant", "Restaurant")
                        .WithOne("Menu")
                        .HasForeignKey("FoodDeliveryApp.Entities.Menu", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.MenuCategory", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.Menu", "Menu")
                        .WithMany("Categories")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Order", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.OrderDish", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.Dish", "Dish")
                        .WithMany("OrderDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Entities.Order", "Order")
                        .WithMany("OrderDishes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.FoodCategory", "FoodCategory")
                        .WithMany("Restaurants")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.RestaurantUser", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.Restaurant", "Restaurant")
                        .WithMany("Users")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApp.Entities.User", "User")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApp.Entities.Score", b =>
                {
                    b.HasOne("FoodDeliveryApp.Entities.Restaurant", "Restaurant")
                        .WithOne("Score")
                        .HasForeignKey("FoodDeliveryApp.Entities.Score", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
